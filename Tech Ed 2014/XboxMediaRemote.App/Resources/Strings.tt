<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.CSharp" #>
<#@ import namespace="EnvDTE" #>
<#@ output extension=".cs" #>
<#
    DTE env = GetVSEnvironment();
    var inputFilePath = @"en\Resources.resw";
    var provider = new CSharpCodeProvider();
    string className = CreateClassName(provider);

    SetCurrentDirectory();
    if (File.Exists(inputFilePath)) {
#>
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a resource generator.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using Windows.ApplicationModel.Resources;

namespace <#= GetNamespace() #> 
{
    public static class <#= className #> 
	{
        public static ResourceLoader ResourceLoader 
		{ 
			get; private set; 
		}

        static <#= className #>() 
		{
            ResourceLoader = new ResourceLoader();
        }

		public static string Get(string resource)
		{
			return ResourceLoader.GetString(resource); 
		}

		public static string Format(string resource, params object[] args)
		{
			return String.Format(ResourceLoader.GetString(resource), args);
		}

<#
        foreach (string name in GetResourceKeys(inputFilePath)) {
#>
        public static string <#= BuildPropertyName(provider, name)  #> 
		{
            get 
			{ 
				return ResourceLoader.GetString("<#= BuildResourceString(name) #>"); 
			}
        }

<#
        }
#>
    }
}
<#
    } else {
        throw new FileNotFoundException(String.Format("Unable to find Resource file: {0}", inputFilePath)); 
    } 
#>
<#+
	private string BuildPropertyName(CSharpCodeProvider provider, string name)
	{
		return provider.CreateEscapedIdentifier(Regex.Replace(name, @"(\[.+\]\w+)|\.", String.Empty));
	}

	private string BuildResourceString(string name)
	{
		return name.Replace(".", "/");
	}

    private DTE GetVSEnvironment() {
        DTE env = null;
        var provider = Host as IServiceProvider;
        if (provider != null) {
            env = provider.GetService(typeof(DTE)) as DTE;
        }

        if (env == null) {
            throw new InvalidOperationException("Template must be executed from Visual Studio");
        }

        return env;
    }

    private void SetCurrentDirectory() {
        Directory.SetCurrentDirectory(Host.ResolvePath(""));
    }

    private string CreateClassName(CSharpCodeProvider provider) {
        string name = Path.GetFileNameWithoutExtension(Host.TemplateFile);
        return provider.CreateEscapedIdentifier(name);
    }

    private string GetNamespace() {
        return Host.ResolveParameterValue("directiveId", "namespaceDirectiveProcessor", "namespaceHint");
    }

    private static IEnumerable<string> GetResourceKeys(string filePath) {
        XDocument doc = XDocument.Load(filePath);
        return doc.Root.Elements("data").Select(e => e.Attribute("name").Value);
    }
#>